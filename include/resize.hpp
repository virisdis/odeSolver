// ------------------------------------------------------------------------------------------

#pragma once

// ------------------------------------------------------------------------------------------

// вспомогательная функция, выделяющая память
// для хранения промежуточных результатов
// (н-р k1, k2, k3, k4 в схеме Рунге - Кутты IV порядка).
// применение см. в классах со степперами:
// adjust_size в runge_kutta4 и т. п.
// (избегаем segfault)

// ------------------------------------------------------------------------------------------
// стандартная реализация для работы с
// динамическими контейнерами,
// предоставляющими функции resize() и size()
// (пример из boost.uBLAS - vector)

template <typename state_type>
void resize(const state_type& in, state_type& out)
{
  using std::size;
  out.resize(size(in));
}

// ------------------------------------------------------------------------------------------
// для матриц (например, из boost.uBLAS)

template <typename state_type, typename matrix_type>
void resize(const state_type& in, matrix_type& out)
{
  using std::size;
  out.resize(size(in), size(in)); // всегда возвращает квадратную матрицу
}

// ------------------------------------------------------------------------------------------

// можно указать специализации для других типов

// ------------------------------------------------------------------------------------------
